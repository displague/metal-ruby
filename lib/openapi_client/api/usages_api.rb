=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class UsagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve all usages for device
    # Returns all usages for a device.
    # @param id [String] Device UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_after Filter usages created after this date
    # @option opts [String] :created_before Filter usages created before this date
    # @return [DeviceUsageList]
    def find_device_usages(id, opts = {})
      data, _status_code, _headers = find_device_usages_with_http_info(id, opts)
      data
    end

    # Retrieve all usages for device
    # Returns all usages for a device.
    # @param id [String] Device UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_after Filter usages created after this date
    # @option opts [String] :created_before Filter usages created before this date
    # @return [Array<(DeviceUsageList, Integer, Hash)>] DeviceUsageList data, response status code and response headers
    def find_device_usages_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsagesApi.find_device_usages ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsagesApi.find_device_usages"
      end
      # resource path
      local_var_path = '/devices/{id}/usages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'created[after]'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'created[before]'] = opts[:'created_before'] if !opts[:'created_before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceUsageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"UsagesApi.find_device_usages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsagesApi#find_device_usages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve all usages for project
    # Returns all usages for a project.
    # @param id [String] Project UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_after Filter usages created after this date
    # @option opts [String] :created_before Filter usages created before this date
    # @return [ProjectUsageList]
    def find_project_usage(id, opts = {})
      data, _status_code, _headers = find_project_usage_with_http_info(id, opts)
      data
    end

    # Retrieve all usages for project
    # Returns all usages for a project.
    # @param id [String] Project UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_after Filter usages created after this date
    # @option opts [String] :created_before Filter usages created before this date
    # @return [Array<(ProjectUsageList, Integer, Hash)>] ProjectUsageList data, response status code and response headers
    def find_project_usage_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsagesApi.find_project_usage ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UsagesApi.find_project_usage"
      end
      # resource path
      local_var_path = '/projects/{id}/usages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'created[after]'] = opts[:'created_after'] if !opts[:'created_after'].nil?
      query_params[:'created[before]'] = opts[:'created_before'] if !opts[:'created_before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectUsageList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"UsagesApi.find_project_usage",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsagesApi#find_project_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
