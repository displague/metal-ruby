=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class VPNApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve the client vpn config for current user
    # Returns the client vpn config for the currently logged-in user.
    # @param code [String] Facility code
    # @param [Hash] opts the optional parameters
    # @return [VPNConfig]
    def find_current_user_vpn_config(code, opts = {})
      data, _status_code, _headers = find_current_user_vpn_config_with_http_info(code, opts)
      data
    end

    # Retrieve the client vpn config for current user
    # Returns the client vpn config for the currently logged-in user.
    # @param code [String] Facility code
    # @param [Hash] opts the optional parameters
    # @return [Array<(VPNConfig, Integer, Hash)>] VPNConfig data, response status code and response headers
    def find_current_user_vpn_config_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNApi.find_current_user_vpn_config ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling VPNApi.find_current_user_vpn_config"
      end
      # verify enum value
      allowable_values = ["ewr1", "scj1", "arm1", "nrt1"]
      if @api_client.config.client_side_validation && !allowable_values.include?(code)
        fail ArgumentError, "invalid value for \"code\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/user/vpn'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = code

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VPNConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"VPNApi.find_current_user_vpn_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNApi#find_current_user_vpn_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Turn off vpn for the current user
    # Turns off vpn for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def turn_off_current_user_vpn(opts = {})
      turn_off_current_user_vpn_with_http_info(opts)
      nil
    end

    # Turn off vpn for the current user
    # Turns off vpn for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def turn_off_current_user_vpn_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNApi.turn_off_current_user_vpn ...'
      end
      # resource path
      local_var_path = '/user/vpn'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"VPNApi.turn_off_current_user_vpn",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNApi#turn_off_current_user_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Turn on vpn for the current user
    # Turns on vpn for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def turn_on_current_user_vpn(opts = {})
      turn_on_current_user_vpn_with_http_info(opts)
      nil
    end

    # Turn on vpn for the current user
    # Turns on vpn for the currently logged-in user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def turn_on_current_user_vpn_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VPNApi.turn_on_current_user_vpn ...'
      end
      # resource path
      local_var_path = '/user/vpn'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"VPNApi.turn_on_current_user_vpn",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VPNApi#turn_on_current_user_vpn\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
