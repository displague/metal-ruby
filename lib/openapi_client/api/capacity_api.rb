=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CapacityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check capacity
    # Validates if a deploy can be fulfilled.
    # @param facility [CapacityInput] Facility to check capacity in
    # @param [Hash] opts the optional parameters
    # @return [CapacityCheckPerFacilityList]
    def check_capacity_for_facility(facility, opts = {})
      data, _status_code, _headers = check_capacity_for_facility_with_http_info(facility, opts)
      data
    end

    # Check capacity
    # Validates if a deploy can be fulfilled.
    # @param facility [CapacityInput] Facility to check capacity in
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapacityCheckPerFacilityList, Integer, Hash)>] CapacityCheckPerFacilityList data, response status code and response headers
    def check_capacity_for_facility_with_http_info(facility, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapacityApi.check_capacity_for_facility ...'
      end
      # verify the required parameter 'facility' is set
      if @api_client.config.client_side_validation && facility.nil?
        fail ArgumentError, "Missing the required parameter 'facility' when calling CapacityApi.check_capacity_for_facility"
      end
      # resource path
      local_var_path = '/capacity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(facility)

      # return_type
      return_type = opts[:debug_return_type] || 'CapacityCheckPerFacilityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"CapacityApi.check_capacity_for_facility",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapacityApi#check_capacity_for_facility\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # View capacity
    # Returns a list of facilities and plans with their current capacity.
    # @param [Hash] opts the optional parameters
    # @return [CapacityList]
    def find_capacity_for_facility(opts = {})
      data, _status_code, _headers = find_capacity_for_facility_with_http_info(opts)
      data
    end

    # View capacity
    # Returns a list of facilities and plans with their current capacity.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CapacityList, Integer, Hash)>] CapacityList data, response status code and response headers
    def find_capacity_for_facility_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CapacityApi.find_capacity_for_facility ...'
      end
      # resource path
      local_var_path = '/capacity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CapacityList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"CapacityApi.find_capacity_for_facility",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CapacityApi#find_capacity_for_facility\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
