=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class OtpsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Verify user by providing an OTP
    # It verifies the user once a valid OTP is provided. It gives back a session token, essentially logging in the user.
    # @param otp [String] OTP
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def find_ensure_otp(otp, opts = {})
      find_ensure_otp_with_http_info(otp, opts)
      nil
    end

    # Verify user by providing an OTP
    # It verifies the user once a valid OTP is provided. It gives back a session token, essentially logging in the user.
    # @param otp [String] OTP
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def find_ensure_otp_with_http_info(otp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtpsApi.find_ensure_otp ...'
      end
      # verify the required parameter 'otp' is set
      if @api_client.config.client_side_validation && otp.nil?
        fail ArgumentError, "Missing the required parameter 'otp' when calling OtpsApi.find_ensure_otp"
      end
      # resource path
      local_var_path = '/user/otp/verify/{otp}'.sub('{' + 'otp' + '}', CGI.escape(otp.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"OtpsApi.find_ensure_otp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtpsApi#find_ensure_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve my recovery codes
    # Returns my recovery codes.
    # @param [Hash] opts the optional parameters
    # @return [RecoveryCodeList]
    def find_recovery_codes(opts = {})
      data, _status_code, _headers = find_recovery_codes_with_http_info(opts)
      data
    end

    # Retrieve my recovery codes
    # Returns my recovery codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecoveryCodeList, Integer, Hash)>] RecoveryCodeList data, response status code and response headers
    def find_recovery_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtpsApi.find_recovery_codes ...'
      end
      # resource path
      local_var_path = '/user/otp/recovery-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecoveryCodeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"OtpsApi.find_recovery_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtpsApi#find_recovery_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Receive an OTP per sms
    # Sends an OTP to the user's mobile phone.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def receive_codes(opts = {})
      receive_codes_with_http_info(opts)
      nil
    end

    # Receive an OTP per sms
    # Sends an OTP to the user&#39;s mobile phone.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def receive_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtpsApi.receive_codes ...'
      end
      # resource path
      local_var_path = '/user/otp/sms/receive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"OtpsApi.receive_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtpsApi#receive_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate new recovery codes
    # Generate a new set of recovery codes.
    # @param [Hash] opts the optional parameters
    # @return [RecoveryCodeList]
    def regenerate_codes(opts = {})
      data, _status_code, _headers = regenerate_codes_with_http_info(opts)
      data
    end

    # Generate new recovery codes
    # Generate a new set of recovery codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecoveryCodeList, Integer, Hash)>] RecoveryCodeList data, response status code and response headers
    def regenerate_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OtpsApi.regenerate_codes ...'
      end
      # resource path
      local_var_path = '/user/otp/recovery-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RecoveryCodeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"OtpsApi.regenerate_codes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OtpsApi#regenerate_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
