=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ConnectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Virtual Circuit
    # Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
    # @param connection_id [String] UUID of the connection
    # @param port_id [String] UUID of the connection port
    # @param virtual_circuit [VirtualCircuitCreateInput] Virtual Circuit details
    # @param [Hash] opts the optional parameters
    # @return [VirtualCircuitList]
    def create_connection_port_virtual_circuit(connection_id, port_id, virtual_circuit, opts = {})
      data, _status_code, _headers = create_connection_port_virtual_circuit_with_http_info(connection_id, port_id, virtual_circuit, opts)
      data
    end

    # Create a new Virtual Circuit
    # Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
    # @param connection_id [String] UUID of the connection
    # @param port_id [String] UUID of the connection port
    # @param virtual_circuit [VirtualCircuitCreateInput] Virtual Circuit details
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualCircuitList, Integer, Hash)>] VirtualCircuitList data, response status code and response headers
    def create_connection_port_virtual_circuit_with_http_info(connection_id, port_id, virtual_circuit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_connection_port_virtual_circuit ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.create_connection_port_virtual_circuit"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling ConnectionsApi.create_connection_port_virtual_circuit"
      end
      # verify the required parameter 'virtual_circuit' is set
      if @api_client.config.client_side_validation && virtual_circuit.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_circuit' when calling ConnectionsApi.create_connection_port_virtual_circuit"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/ports/{port_id}/virtual-circuits'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'port_id' + '}', CGI.escape(port_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(virtual_circuit)

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualCircuitList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_connection_port_virtual_circuit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_connection_port_virtual_circuit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a new connection for the organization
    # Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
    # @param organization_id [String] UUID of the organization
    # @param connection [InterconnectionCreateInput] Connection details
    # @param [Hash] opts the optional parameters
    # @return [Interconnection]
    def create_organization_interconnection(organization_id, connection, opts = {})
      data, _status_code, _headers = create_organization_interconnection_with_http_info(organization_id, connection, opts)
      data
    end

    # Request a new connection for the organization
    # Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
    # @param organization_id [String] UUID of the organization
    # @param connection [InterconnectionCreateInput] Connection details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interconnection, Integer, Hash)>] Interconnection data, response status code and response headers
    def create_organization_interconnection_with_http_info(organization_id, connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_organization_interconnection ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ConnectionsApi.create_organization_interconnection"
      end
      # verify the required parameter 'connection' is set
      if @api_client.config.client_side_validation && connection.nil?
        fail ArgumentError, "Missing the required parameter 'connection' when calling ConnectionsApi.create_organization_interconnection"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/connections'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection)

      # return_type
      return_type = opts[:debug_return_type] || 'Interconnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_organization_interconnection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_organization_interconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a new connection for the project's organization
    # Creates a new connection request
    # @param project_id [String] UUID of the project
    # @param connection [InterconnectionCreateInput] Connection details
    # @param [Hash] opts the optional parameters
    # @return [Interconnection]
    def create_project_interconnection(project_id, connection, opts = {})
      data, _status_code, _headers = create_project_interconnection_with_http_info(project_id, connection, opts)
      data
    end

    # Request a new connection for the project&#39;s organization
    # Creates a new connection request
    # @param project_id [String] UUID of the project
    # @param connection [InterconnectionCreateInput] Connection details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interconnection, Integer, Hash)>] Interconnection data, response status code and response headers
    def create_project_interconnection_with_http_info(project_id, connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.create_project_interconnection ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectionsApi.create_project_interconnection"
      end
      # verify the required parameter 'connection' is set
      if @api_client.config.client_side_validation && connection.nil?
        fail ArgumentError, "Missing the required parameter 'connection' when calling ConnectionsApi.create_project_interconnection"
      end
      # resource path
      local_var_path = '/projects/{project_id}/connections'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection)

      # return_type
      return_type = opts[:debug_return_type] || 'Interconnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.create_project_interconnection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#create_project_interconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete connection
    # Delete a connection, its associated ports and virtual circuits.
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @return [Interconnection]
    def delete_interconnection(connection_id, opts = {})
      data, _status_code, _headers = delete_interconnection_with_http_info(connection_id, opts)
      data
    end

    # Delete connection
    # Delete a connection, its associated ports and virtual circuits.
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interconnection, Integer, Hash)>] Interconnection data, response status code and response headers
    def delete_interconnection_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.delete_interconnection ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.delete_interconnection"
      end
      # resource path
      local_var_path = '/connections/{connection_id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Interconnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.delete_interconnection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#delete_interconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a virtual circuit
    # Delete a virtual circuit from a dedicated port.
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @return [VirtualCircuit]
    def delete_virtual_circuit(id, opts = {})
      data, _status_code, _headers = delete_virtual_circuit_with_http_info(id, opts)
      data
    end

    # Delete a virtual circuit
    # Delete a virtual circuit from a dedicated port.
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualCircuit, Integer, Hash)>] VirtualCircuit data, response status code and response headers
    def delete_virtual_circuit_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.delete_virtual_circuit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.delete_virtual_circuit"
      end
      # resource path
      local_var_path = '/virtual-circuits/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualCircuit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.delete_virtual_circuit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#delete_virtual_circuit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve connection events
    # Returns a list of the connection events
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return (default to 1)
    # @option opts [Integer] :per_page Items returned per page (default to 10)
    # @return [Event]
    def find_connection_events(connection_id, opts = {})
      data, _status_code, _headers = find_connection_events_with_http_info(connection_id, opts)
      data
    end

    # Retrieve connection events
    # Returns a list of the connection events
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return
    # @option opts [Integer] :per_page Items returned per page
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def find_connection_events_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.find_connection_events ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.find_connection_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 100000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_connection_events, must be smaller than or equal to 100000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_connection_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_connection_events, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_connection_events, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/connections/{connection_id}/events'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :csv) if !opts[:'exclude'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.find_connection_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#find_connection_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve connection port events
    # Returns a list of the connection port events
    # @param connection_id [String] Connection UUID
    # @param id [String] Connection Port UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return (default to 1)
    # @option opts [Integer] :per_page Items returned per page (default to 10)
    # @return [Event]
    def find_connection_port_events(connection_id, id, opts = {})
      data, _status_code, _headers = find_connection_port_events_with_http_info(connection_id, id, opts)
      data
    end

    # Retrieve connection port events
    # Returns a list of the connection port events
    # @param connection_id [String] Connection UUID
    # @param id [String] Connection Port UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return
    # @option opts [Integer] :per_page Items returned per page
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def find_connection_port_events_with_http_info(connection_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.find_connection_port_events ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.find_connection_port_events"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.find_connection_port_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 100000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_connection_port_events, must be smaller than or equal to 100000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_connection_port_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_connection_port_events, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_connection_port_events, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/connections/{connection_id}/ports/{id}/events'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :csv) if !opts[:'exclude'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.find_connection_port_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#find_connection_port_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve connection events
    # Returns a list of the virtual circuit events
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return (default to 1)
    # @option opts [Integer] :per_page Items returned per page (default to 10)
    # @return [Event]
    def find_virtual_circuit_events(id, opts = {})
      data, _status_code, _headers = find_virtual_circuit_events_with_http_info(id, opts)
      data
    end

    # Retrieve connection events
    # Returns a list of the virtual circuit events
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @option opts [Integer] :page Page to return
    # @option opts [Integer] :per_page Items returned per page
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def find_virtual_circuit_events_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.find_virtual_circuit_events ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.find_virtual_circuit_events"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] > 100000
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_virtual_circuit_events, must be smaller than or equal to 100000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ConnectionsApi.find_virtual_circuit_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_virtual_circuit_events, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling ConnectionsApi.find_virtual_circuit_events, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/virtual-circuit/{id}/events'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :csv) if !opts[:'exclude'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.find_virtual_circuit_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#find_virtual_circuit_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a connection port
    # Get the details of an connection port.
    # @param connection_id [String] UUID of the connection
    # @param id [String] Port UUID
    # @param [Hash] opts the optional parameters
    # @return [InterconnectionPort]
    def get_connection_port(connection_id, id, opts = {})
      data, _status_code, _headers = get_connection_port_with_http_info(connection_id, id, opts)
      data
    end

    # Get a connection port
    # Get the details of an connection port.
    # @param connection_id [String] UUID of the connection
    # @param id [String] Port UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterconnectionPort, Integer, Hash)>] InterconnectionPort data, response status code and response headers
    def get_connection_port_with_http_info(connection_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_connection_port ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.get_connection_port"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.get_connection_port"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/ports/{id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InterconnectionPort'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_connection_port",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_connection_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get connection
    # Get the details of a connection
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @return [Interconnection]
    def get_interconnection(connection_id, opts = {})
      data, _status_code, _headers = get_interconnection_with_http_info(connection_id, opts)
      data
    end

    # Get connection
    # Get the details of a connection
    # @param connection_id [String] Connection UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interconnection, Integer, Hash)>] Interconnection data, response status code and response headers
    def get_interconnection_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_interconnection ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.get_interconnection"
      end
      # resource path
      local_var_path = '/connections/{connection_id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Interconnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_interconnection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_interconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a virtual circuit
    # Get the details of a virtual circuit
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @return [VirtualCircuit]
    def get_virtual_circuit(id, opts = {})
      data, _status_code, _headers = get_virtual_circuit_with_http_info(id, opts)
      data
    end

    # Get a virtual circuit
    # Get the details of a virtual circuit
    # @param id [String] Virtual Circuit UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualCircuit, Integer, Hash)>] VirtualCircuit data, response status code and response headers
    def get_virtual_circuit_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.get_virtual_circuit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.get_virtual_circuit"
      end
      # resource path
      local_var_path = '/virtual-circuits/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualCircuit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.get_virtual_circuit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#get_virtual_circuit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a connection port's virtual circuits
    # List the virtual circuit record(s) associatiated with a particular connection port.
    # @param connection_id [String] UUID of the connection
    # @param port_id [String] UUID of the connection port
    # @param [Hash] opts the optional parameters
    # @return [VirtualCircuitList]
    def list_connection_port_virtual_circuits(connection_id, port_id, opts = {})
      data, _status_code, _headers = list_connection_port_virtual_circuits_with_http_info(connection_id, port_id, opts)
      data
    end

    # List a connection port&#39;s virtual circuits
    # List the virtual circuit record(s) associatiated with a particular connection port.
    # @param connection_id [String] UUID of the connection
    # @param port_id [String] UUID of the connection port
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualCircuitList, Integer, Hash)>] VirtualCircuitList data, response status code and response headers
    def list_connection_port_virtual_circuits_with_http_info(connection_id, port_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.list_connection_port_virtual_circuits ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.list_connection_port_virtual_circuits"
      end
      # verify the required parameter 'port_id' is set
      if @api_client.config.client_side_validation && port_id.nil?
        fail ArgumentError, "Missing the required parameter 'port_id' when calling ConnectionsApi.list_connection_port_virtual_circuits"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/ports/{port_id}/virtual-circuits'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s)).sub('{' + 'port_id' + '}', CGI.escape(port_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualCircuitList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.list_connection_port_virtual_circuits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#list_connection_port_virtual_circuits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List a connection's ports
    # List the ports associated to an connection.
    # @param connection_id [String] UUID of the connection
    # @param [Hash] opts the optional parameters
    # @return [InterconnectionPortList]
    def list_connection_ports(connection_id, opts = {})
      data, _status_code, _headers = list_connection_ports_with_http_info(connection_id, opts)
      data
    end

    # List a connection&#39;s ports
    # List the ports associated to an connection.
    # @param connection_id [String] UUID of the connection
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterconnectionPortList, Integer, Hash)>] InterconnectionPortList data, response status code and response headers
    def list_connection_ports_with_http_info(connection_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.list_connection_ports ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.list_connection_ports"
      end
      # resource path
      local_var_path = '/connections/{connection_id}/ports'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InterconnectionPortList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.list_connection_ports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#list_connection_ports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List organization connections
    # List the connections belonging to the organization
    # @param organization_id [String] UUID of the organization
    # @param [Hash] opts the optional parameters
    # @return [InterconnectionList]
    def organization_list_interconnections(organization_id, opts = {})
      data, _status_code, _headers = organization_list_interconnections_with_http_info(organization_id, opts)
      data
    end

    # List organization connections
    # List the connections belonging to the organization
    # @param organization_id [String] UUID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterconnectionList, Integer, Hash)>] InterconnectionList data, response status code and response headers
    def organization_list_interconnections_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.organization_list_interconnections ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling ConnectionsApi.organization_list_interconnections"
      end
      # resource path
      local_var_path = '/organizations/{organization_id}/connections'.sub('{' + 'organization_id' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InterconnectionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.organization_list_interconnections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#organization_list_interconnections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List project connections
    # List the connections belonging to the project
    # @param project_id [String] UUID of the project
    # @param [Hash] opts the optional parameters
    # @return [InterconnectionList]
    def project_list_interconnections(project_id, opts = {})
      data, _status_code, _headers = project_list_interconnections_with_http_info(project_id, opts)
      data
    end

    # List project connections
    # List the connections belonging to the project
    # @param project_id [String] UUID of the project
    # @param [Hash] opts the optional parameters
    # @return [Array<(InterconnectionList, Integer, Hash)>] InterconnectionList data, response status code and response headers
    def project_list_interconnections_with_http_info(project_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.project_list_interconnections ...'
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        fail ArgumentError, "Missing the required parameter 'project_id' when calling ConnectionsApi.project_list_interconnections"
      end
      # resource path
      local_var_path = '/projects/{project_id}/connections'.sub('{' + 'project_id' + '}', CGI.escape(project_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InterconnectionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.project_list_interconnections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#project_list_interconnections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update connection
    # Update the details of a connection
    # @param connection_id [String] Connection UUID
    # @param connection [InterconnectionUpdateInput] Updated connection details
    # @param [Hash] opts the optional parameters
    # @return [Interconnection]
    def update_interconnection(connection_id, connection, opts = {})
      data, _status_code, _headers = update_interconnection_with_http_info(connection_id, connection, opts)
      data
    end

    # Update connection
    # Update the details of a connection
    # @param connection_id [String] Connection UUID
    # @param connection [InterconnectionUpdateInput] Updated connection details
    # @param [Hash] opts the optional parameters
    # @return [Array<(Interconnection, Integer, Hash)>] Interconnection data, response status code and response headers
    def update_interconnection_with_http_info(connection_id, connection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.update_interconnection ...'
      end
      # verify the required parameter 'connection_id' is set
      if @api_client.config.client_side_validation && connection_id.nil?
        fail ArgumentError, "Missing the required parameter 'connection_id' when calling ConnectionsApi.update_interconnection"
      end
      # verify the required parameter 'connection' is set
      if @api_client.config.client_side_validation && connection.nil?
        fail ArgumentError, "Missing the required parameter 'connection' when calling ConnectionsApi.update_interconnection"
      end
      # resource path
      local_var_path = '/connections/{connection_id}'.sub('{' + 'connection_id' + '}', CGI.escape(connection_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection)

      # return_type
      return_type = opts[:debug_return_type] || 'Interconnection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.update_interconnection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#update_interconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a virtual circuit
    # Update the details of a virtual circuit.
    # @param id [String] Virtual Circuit UUID
    # @param virtual_circuit [VirtualCircuitUpdateInput] Updated Virtual Circuit details
    # @param [Hash] opts the optional parameters
    # @return [VirtualCircuit]
    def update_virtual_circuit(id, virtual_circuit, opts = {})
      data, _status_code, _headers = update_virtual_circuit_with_http_info(id, virtual_circuit, opts)
      data
    end

    # Update a virtual circuit
    # Update the details of a virtual circuit.
    # @param id [String] Virtual Circuit UUID
    # @param virtual_circuit [VirtualCircuitUpdateInput] Updated Virtual Circuit details
    # @param [Hash] opts the optional parameters
    # @return [Array<(VirtualCircuit, Integer, Hash)>] VirtualCircuit data, response status code and response headers
    def update_virtual_circuit_with_http_info(id, virtual_circuit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConnectionsApi.update_virtual_circuit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConnectionsApi.update_virtual_circuit"
      end
      # verify the required parameter 'virtual_circuit' is set
      if @api_client.config.client_side_validation && virtual_circuit.nil?
        fail ArgumentError, "Missing the required parameter 'virtual_circuit' when calling ConnectionsApi.update_virtual_circuit"
      end
      # resource path
      local_var_path = '/virtual-circuits/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(virtual_circuit)

      # return_type
      return_type = opts[:debug_return_type] || 'VirtualCircuit'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"ConnectionsApi.update_virtual_circuit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConnectionsApi#update_virtual_circuit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
