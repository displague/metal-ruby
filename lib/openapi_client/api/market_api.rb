=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MarketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get current spot market prices
    # Get Equinix Metal current spot market prices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :facility Facility to check spot market prices
    # @option opts [String] :plan Plan to check spot market prices
    # @return [SpotMarketPricesList]
    def find_spot_market_prices(opts = {})
      data, _status_code, _headers = find_spot_market_prices_with_http_info(opts)
      data
    end

    # Get current spot market prices
    # Get Equinix Metal current spot market prices.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :facility Facility to check spot market prices
    # @option opts [String] :plan Plan to check spot market prices
    # @return [Array<(SpotMarketPricesList, Integer, Hash)>] SpotMarketPricesList data, response status code and response headers
    def find_spot_market_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.find_spot_market_prices ...'
      end
      # resource path
      local_var_path = '/market/spot/prices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'facility'] = opts[:'facility'] if !opts[:'facility'].nil?
      query_params[:'plan'] = opts[:'plan'] if !opts[:'plan'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpotMarketPricesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"MarketApi.find_spot_market_prices",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#find_spot_market_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get spot market prices for a given period of time
    # Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the `200` response, the property `datapoints` contains arrays of `[float, integer]`.*
    # @param facility [String] Facility to check spot market prices
    # @param plan [String] Plan to check spot market prices
    # @param from [String] Timestamp from range
    # @param _until [String] Timestamp to range
    # @param [Hash] opts the optional parameters
    # @return [SpotPricesHistoryReport]
    def find_spot_market_prices_history(facility, plan, from, _until, opts = {})
      data, _status_code, _headers = find_spot_market_prices_history_with_http_info(facility, plan, from, _until, opts)
      data
    end

    # Get spot market prices for a given period of time
    # Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the &#x60;200&#x60; response, the property &#x60;datapoints&#x60; contains arrays of &#x60;[float, integer]&#x60;.*
    # @param facility [String] Facility to check spot market prices
    # @param plan [String] Plan to check spot market prices
    # @param from [String] Timestamp from range
    # @param _until [String] Timestamp to range
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpotPricesHistoryReport, Integer, Hash)>] SpotPricesHistoryReport data, response status code and response headers
    def find_spot_market_prices_history_with_http_info(facility, plan, from, _until, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MarketApi.find_spot_market_prices_history ...'
      end
      # verify the required parameter 'facility' is set
      if @api_client.config.client_side_validation && facility.nil?
        fail ArgumentError, "Missing the required parameter 'facility' when calling MarketApi.find_spot_market_prices_history"
      end
      # verify the required parameter 'plan' is set
      if @api_client.config.client_side_validation && plan.nil?
        fail ArgumentError, "Missing the required parameter 'plan' when calling MarketApi.find_spot_market_prices_history"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling MarketApi.find_spot_market_prices_history"
      end
      # verify the required parameter '_until' is set
      if @api_client.config.client_side_validation && _until.nil?
        fail ArgumentError, "Missing the required parameter '_until' when calling MarketApi.find_spot_market_prices_history"
      end
      # resource path
      local_var_path = '/market/spot/prices/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'facility'] = facility
      query_params[:'plan'] = plan
      query_params[:'from'] = from
      query_params[:'until'] = _until

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpotPricesHistoryReport'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"MarketApi.find_spot_market_prices_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MarketApi#find_spot_market_prices_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
