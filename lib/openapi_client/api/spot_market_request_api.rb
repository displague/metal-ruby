=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SpotMarketRequestApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a spot market request
    # Creates a new spot market request.  Type-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.  The features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify `{ \"features\": { \"tpm\": \"required\" } }` (or `{ \"features\": [\"tpm\"] }` in shorthand).  The request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).  The request will not fail if we have no servers with that feature in our inventory.
    # @param id [String] Project UUID
    # @param spot_market_request [SpotMarketRequestCreateInput] Spot Market Request to create
    # @param [Hash] opts the optional parameters
    # @return [SpotMarketRequest]
    def create_spot_market_request(id, spot_market_request, opts = {})
      data, _status_code, _headers = create_spot_market_request_with_http_info(id, spot_market_request, opts)
      data
    end

    # Create a spot market request
    # Creates a new spot market request.  Type-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.  The features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify &#x60;{ \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot; } }&#x60; (or &#x60;{ \&quot;features\&quot;: [\&quot;tpm\&quot;] }&#x60; in shorthand).  The request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).  The request will not fail if we have no servers with that feature in our inventory.
    # @param id [String] Project UUID
    # @param spot_market_request [SpotMarketRequestCreateInput] Spot Market Request to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpotMarketRequest, Integer, Hash)>] SpotMarketRequest data, response status code and response headers
    def create_spot_market_request_with_http_info(id, spot_market_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpotMarketRequestApi.create_spot_market_request ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SpotMarketRequestApi.create_spot_market_request"
      end
      # verify the required parameter 'spot_market_request' is set
      if @api_client.config.client_side_validation && spot_market_request.nil?
        fail ArgumentError, "Missing the required parameter 'spot_market_request' when calling SpotMarketRequestApi.create_spot_market_request"
      end
      # resource path
      local_var_path = '/projects/{id}/spot-market-requests'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(spot_market_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SpotMarketRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"SpotMarketRequestApi.create_spot_market_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpotMarketRequestApi#create_spot_market_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the spot market request
    # Deletes the spot market request.
    # @param id [String] SpotMarketRequest UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_termination Terminate associated spot instances
    # @return [nil]
    def delete_spot_market_request(id, opts = {})
      delete_spot_market_request_with_http_info(id, opts)
      nil
    end

    # Delete the spot market request
    # Deletes the spot market request.
    # @param id [String] SpotMarketRequest UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_termination Terminate associated spot instances
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_spot_market_request_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpotMarketRequestApi.delete_spot_market_request ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SpotMarketRequestApi.delete_spot_market_request"
      end
      # resource path
      local_var_path = '/spot-market-requests/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'force_termination'] = opts[:'force_termination'] if !opts[:'force_termination'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"SpotMarketRequestApi.delete_spot_market_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpotMarketRequestApi#delete_spot_market_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a spot market request
    # Returns a single spot market request
    # @param id [String] SpotMarketRequest UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @return [SpotMarketRequest]
    def find_spot_market_request_by_id(id, opts = {})
      data, _status_code, _headers = find_spot_market_request_by_id_with_http_info(id, opts)
      data
    end

    # Retrieve a spot market request
    # Returns a single spot market request
    # @param id [String] SpotMarketRequest UUID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects.
    # @option opts [Array<String>] :exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects.
    # @return [Array<(SpotMarketRequest, Integer, Hash)>] SpotMarketRequest data, response status code and response headers
    def find_spot_market_request_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpotMarketRequestApi.find_spot_market_request_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SpotMarketRequestApi.find_spot_market_request_by_id"
      end
      # resource path
      local_var_path = '/spot-market-requests/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'exclude'] = @api_client.build_collection_param(opts[:'exclude'], :csv) if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpotMarketRequest'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"SpotMarketRequestApi.find_spot_market_request_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpotMarketRequestApi#find_spot_market_request_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List spot market requests
    # View all spot market requests for a given project.
    # @param id [String] Project UUID
    # @param [Hash] opts the optional parameters
    # @return [SpotMarketRequestList]
    def list_spot_market_requests(id, opts = {})
      data, _status_code, _headers = list_spot_market_requests_with_http_info(id, opts)
      data
    end

    # List spot market requests
    # View all spot market requests for a given project.
    # @param id [String] Project UUID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpotMarketRequestList, Integer, Hash)>] SpotMarketRequestList data, response status code and response headers
    def list_spot_market_requests_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpotMarketRequestApi.list_spot_market_requests ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SpotMarketRequestApi.list_spot_market_requests"
      end
      # resource path
      local_var_path = '/projects/{id}/spot-market-requests'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SpotMarketRequestList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['x_auth_token']

      new_options = opts.merge(
        :operation => :"SpotMarketRequestApi.list_spot_market_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpotMarketRequestApi#list_spot_market_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
