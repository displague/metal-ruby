=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class BgpNeighborData
    # Address Family for IP Address
    attr_accessor :address_family

    # The customer's ASN. In a local BGP deployment, this will be an internal ASN used to route within the data center. For a global BGP deployment, this will be the your own ASN, configured when you set up BGP for your project.
    attr_accessor :customer_as

    # The device's IP address. For an IPv4 BGP session, this is typically the private bond0 address for the device.
    attr_accessor :customer_ip

    # True if an MD5 password is configured for the project.
    attr_accessor :md5_enabled

    # The MD5 password configured for the project, if set.
    attr_accessor :md5_password

    # True when the BGP session should be configured as multihop.
    attr_accessor :multihop

    # The Peer ASN to use when configuring BGP on your device.
    attr_accessor :peer_as

    # A list of one or more IP addresses to use for the Peer IP section of your BGP configuration. For non-multihop sessions, this will typically be a single gateway address for the device. For multihop sessions, it will be a list of IPs.
    attr_accessor :peer_ips

    # A list of project subnets
    attr_accessor :routes_in

    # A list of outgoing routes. Only populated if the BGP session has default route enabled.
    attr_accessor :routes_out

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_family' => :'address_family',
        :'customer_as' => :'customer_as',
        :'customer_ip' => :'customer_ip',
        :'md5_enabled' => :'md5_enabled',
        :'md5_password' => :'md5_password',
        :'multihop' => :'multihop',
        :'peer_as' => :'peer_as',
        :'peer_ips' => :'peer_ips',
        :'routes_in' => :'routes_in',
        :'routes_out' => :'routes_out'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address_family' => :'Float',
        :'customer_as' => :'Float',
        :'customer_ip' => :'String',
        :'md5_enabled' => :'Boolean',
        :'md5_password' => :'String',
        :'multihop' => :'Boolean',
        :'peer_as' => :'Float',
        :'peer_ips' => :'Array<String>',
        :'routes_in' => :'Array<BgpNeighborDataRoutesIn>',
        :'routes_out' => :'Array<BgpNeighborDataRoutesOut>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::BgpNeighborData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::BgpNeighborData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address_family')
        self.address_family = attributes[:'address_family']
      end

      if attributes.key?(:'customer_as')
        self.customer_as = attributes[:'customer_as']
      end

      if attributes.key?(:'customer_ip')
        self.customer_ip = attributes[:'customer_ip']
      end

      if attributes.key?(:'md5_enabled')
        self.md5_enabled = attributes[:'md5_enabled']
      end

      if attributes.key?(:'md5_password')
        self.md5_password = attributes[:'md5_password']
      end

      if attributes.key?(:'multihop')
        self.multihop = attributes[:'multihop']
      end

      if attributes.key?(:'peer_as')
        self.peer_as = attributes[:'peer_as']
      end

      if attributes.key?(:'peer_ips')
        if (value = attributes[:'peer_ips']).is_a?(Array)
          self.peer_ips = value
        end
      end

      if attributes.key?(:'routes_in')
        if (value = attributes[:'routes_in']).is_a?(Array)
          self.routes_in = value
        end
      end

      if attributes.key?(:'routes_out')
        if (value = attributes[:'routes_out']).is_a?(Array)
          self.routes_out = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_family == o.address_family &&
          customer_as == o.customer_as &&
          customer_ip == o.customer_ip &&
          md5_enabled == o.md5_enabled &&
          md5_password == o.md5_password &&
          multihop == o.multihop &&
          peer_as == o.peer_as &&
          peer_ips == o.peer_ips &&
          routes_in == o.routes_in &&
          routes_out == o.routes_out
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_family, customer_as, customer_ip, md5_enabled, md5_password, multihop, peer_as, peer_ips, routes_in, routes_out].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
