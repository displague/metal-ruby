=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class BgpConfig
    attr_accessor :id

    # status requested is valid only for global deployment
    attr_accessor :status

    # In a Local BGP deployment, a customer uses an internal ASN to control routes within a single Equinix Metal datacenter. This means that the routes are never advertised to the global Internet. Global BGP, on the other hand, requires a customer to have a registered ASN and IP space. 
    attr_accessor :deployment_type

    # Autonomous System Number
    attr_accessor :asn

    # Specifies AS-MACRO (aka AS-SET) to use when building client route filters
    attr_accessor :route_object

    # (Optional) Password for BGP session in plaintext (not a checksum)
    attr_accessor :md5

    # The maximum number of route filters allowed per server
    attr_accessor :max_prefix

    attr_accessor :project

    attr_accessor :created_at

    attr_accessor :requested_at

    # The direct connections between neighboring routers that want to exchange routing information.
    attr_accessor :sessions

    # The IP block ranges associated to the ASN (Populated in Global BGP only)
    attr_accessor :ranges

    attr_accessor :href

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'status' => :'status',
        :'deployment_type' => :'deployment_type',
        :'asn' => :'asn',
        :'route_object' => :'route_object',
        :'md5' => :'md5',
        :'max_prefix' => :'max_prefix',
        :'project' => :'project',
        :'created_at' => :'created_at',
        :'requested_at' => :'requested_at',
        :'sessions' => :'sessions',
        :'ranges' => :'ranges',
        :'href' => :'href'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'status' => :'String',
        :'deployment_type' => :'String',
        :'asn' => :'Integer',
        :'route_object' => :'String',
        :'md5' => :'String',
        :'max_prefix' => :'Integer',
        :'project' => :'Href',
        :'created_at' => :'Time',
        :'requested_at' => :'Time',
        :'sessions' => :'Array<BgpSession>',
        :'ranges' => :'Array<GlobalBgpRange>',
        :'href' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::BgpConfig` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::BgpConfig`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'deployment_type')
        self.deployment_type = attributes[:'deployment_type']
      end

      if attributes.key?(:'asn')
        self.asn = attributes[:'asn']
      end

      if attributes.key?(:'route_object')
        self.route_object = attributes[:'route_object']
      end

      if attributes.key?(:'md5')
        self.md5 = attributes[:'md5']
      end

      if attributes.key?(:'max_prefix')
        self.max_prefix = attributes[:'max_prefix']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'requested_at')
        self.requested_at = attributes[:'requested_at']
      end

      if attributes.key?(:'sessions')
        if (value = attributes[:'sessions']).is_a?(Array)
          self.sessions = value
        end
      end

      if attributes.key?(:'ranges')
        if (value = attributes[:'ranges']).is_a?(Array)
          self.ranges = value
        end
      end

      if attributes.key?(:'href')
        self.href = attributes[:'href']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["requested", "enabled", "disabled"])
      return false unless status_validator.valid?(@status)
      deployment_type_validator = EnumAttributeValidator.new('String', ["global", "local"])
      return false unless deployment_type_validator.valid?(@deployment_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["requested", "enabled", "disabled"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] deployment_type Object to be assigned
    def deployment_type=(deployment_type)
      validator = EnumAttributeValidator.new('String', ["global", "local"])
      unless validator.valid?(deployment_type)
        fail ArgumentError, "invalid value for \"deployment_type\", must be one of #{validator.allowable_values}."
      end
      @deployment_type = deployment_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          status == o.status &&
          deployment_type == o.deployment_type &&
          asn == o.asn &&
          route_object == o.route_object &&
          md5 == o.md5 &&
          max_prefix == o.max_prefix &&
          project == o.project &&
          created_at == o.created_at &&
          requested_at == o.requested_at &&
          sessions == o.sessions &&
          ranges == o.ranges &&
          href == o.href
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, status, deployment_type, asn, route_object, md5, max_prefix, project, created_at, requested_at, sessions, ranges, href].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
