=begin
#Metal API

#This is the API for Equinix Metal Product. Interact with your devices, user account, and projects.

The version of the OpenAPI document: 1.0.0
Contact: support@equinixmetal.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class User
    attr_accessor :id

    attr_accessor :short_id

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :full_name

    attr_accessor :email

    attr_accessor :avatar_url

    attr_accessor :avatar_thumb_url

    attr_accessor :two_factor_auth

    attr_accessor :max_projects

    attr_accessor :max_organizations

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :timezone

    attr_accessor :fraud_score

    attr_accessor :last_login_at

    attr_accessor :emails

    attr_accessor :href

    attr_accessor :phone_number

    attr_accessor :customdata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'short_id' => :'short_id',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'full_name' => :'full_name',
        :'email' => :'email',
        :'avatar_url' => :'avatar_url',
        :'avatar_thumb_url' => :'avatar_thumb_url',
        :'two_factor_auth' => :'two_factor_auth',
        :'max_projects' => :'max_projects',
        :'max_organizations' => :'max_organizations',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'timezone' => :'timezone',
        :'fraud_score' => :'fraud_score',
        :'last_login_at' => :'last_login_at',
        :'emails' => :'emails',
        :'href' => :'href',
        :'phone_number' => :'phone_number',
        :'customdata' => :'customdata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'short_id' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'full_name' => :'String',
        :'email' => :'String',
        :'avatar_url' => :'String',
        :'avatar_thumb_url' => :'String',
        :'two_factor_auth' => :'String',
        :'max_projects' => :'Integer',
        :'max_organizations' => :'Integer',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'timezone' => :'String',
        :'fraud_score' => :'String',
        :'last_login_at' => :'Time',
        :'emails' => :'Array<Href>',
        :'href' => :'String',
        :'phone_number' => :'String',
        :'customdata' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'short_id')
        self.short_id = attributes[:'short_id']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'avatar_thumb_url')
        self.avatar_thumb_url = attributes[:'avatar_thumb_url']
      end

      if attributes.key?(:'two_factor_auth')
        self.two_factor_auth = attributes[:'two_factor_auth']
      end

      if attributes.key?(:'max_projects')
        self.max_projects = attributes[:'max_projects']
      end

      if attributes.key?(:'max_organizations')
        self.max_organizations = attributes[:'max_organizations']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'fraud_score')
        self.fraud_score = attributes[:'fraud_score']
      end

      if attributes.key?(:'last_login_at')
        self.last_login_at = attributes[:'last_login_at']
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'href')
        self.href = attributes[:'href']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'customdata')
        self.customdata = attributes[:'customdata']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          short_id == o.short_id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          full_name == o.full_name &&
          email == o.email &&
          avatar_url == o.avatar_url &&
          avatar_thumb_url == o.avatar_thumb_url &&
          two_factor_auth == o.two_factor_auth &&
          max_projects == o.max_projects &&
          max_organizations == o.max_organizations &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          timezone == o.timezone &&
          fraud_score == o.fraud_score &&
          last_login_at == o.last_login_at &&
          emails == o.emails &&
          href == o.href &&
          phone_number == o.phone_number &&
          customdata == o.customdata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, short_id, first_name, last_name, full_name, email, avatar_url, avatar_thumb_url, two_factor_auth, max_projects, max_organizations, created_at, updated_at, timezone, fraud_score, last_login_at, emails, href, phone_number, customdata].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
